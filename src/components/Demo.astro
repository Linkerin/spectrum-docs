<label>
  <input id="main-color-input" name="main-color" type="color" />

  <p>
    Current color: <span id="selected-color">#000000</span>
  </p>
</label>
<section>
  <h2>Color palette</h2>
  <p>
    generated by <a
      aria-label="To 'createPalette' function page"
      href="/docs/create-palette">createPalette()</a
    >
  </p>
  <ol id="palette"></ol>
</section>

<section>
  <h2>Split Complementary colors</h2>
  <p>
    generated by <a
      aria-label="To 'getSplitComplementary' function page"
      href="/docs/get-split-complementary">getSplitComplementary()</a
    >
  </p>
  <div id="split-container">
    <div id="secondary"></div>
    <div id="tertiary"></div>
  </div>
</section>

<script>
  import Spectrum, {
    createPalette,
    getSplitComplementary,
    onBgColor
  } from '@particles/spectrum';

  const bgColors = {
    dark: '#17181c',
    light: '#fcfbf7'
  };

  function createPaletteHtml(palette: Record<string, Spectrum>): string {
    // makes sure that the colors sorted from 0 to 100
    const paletteArr = Object.entries(palette).sort(
      (a, b) => parseInt(a[0]) - parseInt(b[0])
    );

    let html = '';
    for (const [num, colorObj] of paletteArr) {
      const fontColor = onBgColor(colorObj, bgColors);

      html += `<li class='palette-color' style="background-color: ${colorObj.hex}; color: ${fontColor};" title="hex: ${colorObj.hex}">${num}</li>\n`;
    }

    return html;
  }

  interface UpdateElementsParams {
    color: string;
    colorSpan: HTMLSpanElement | null;
    paletteElem: HTMLElement | null;
    secondaryElem: HTMLDivElement | null;
    tertiaryElem: HTMLDivElement | null;
  }
  function updateElements({
    color,
    colorSpan,
    paletteElem,
    secondaryElem,
    tertiaryElem
  }: UpdateElementsParams) {
    const colorObj = new Spectrum('hex', color);
    if (colorSpan) colorSpan.textContent = colorObj.hex;
    if (paletteElem) {
      const palette = createPalette(colorObj);
      paletteElem.innerHTML = createPaletteHtml(palette);
    }

    // updating split complementary colors
    const { secondary, tertiary } = getSplitComplementary(colorObj);
    const splitElements: [HTMLDivElement | null, Spectrum][] = [
      [secondaryElem, secondary],
      [tertiaryElem, tertiary]
    ];

    for (const [elem, color] of splitElements) {
      if (elem) {
        const fontColor = onBgColor(color, bgColors) as string;

        elem.textContent = color.hex;
        elem.style.backgroundColor = color.hex;
        elem.style.color = fontColor;
        elem.title = `color: ${color.hex}`;
      }
    }
  }

  if (typeof document !== 'undefined') {
    const baseColor = '#3051b5';

    // adding custom styles
    const styleEl = document.createElement('style');
    document.head.appendChild(styleEl);
    styleEl.sheet?.insertRule(
      `#palette .palette-color { display: inline-flex; align-items: center; justify-content: center; aspect-ratio: 1 / 1;  width: 2rem; }`
    );

    // get all necessary elements
    const colorInputElem: HTMLInputElement | null =
      document.querySelector('#main-color-input');
    const currColorHexSpan: HTMLSpanElement | null =
      document.querySelector('#selected-color');
    const paletteContainer: HTMLElement | null =
      document.querySelector('#palette');
    const secondaryDiv: HTMLDivElement | null =
      document.querySelector('#secondary');
    const tertiaryDiv: HTMLDivElement | null =
      document.querySelector('#tertiary');

    // set default values
    updateElements({
      color: baseColor,
      colorSpan: currColorHexSpan,
      paletteElem: paletteContainer,
      secondaryElem: secondaryDiv,
      tertiaryElem: tertiaryDiv
    });
    if (colorInputElem) colorInputElem.value = baseColor;

    // user color selection event
    function handleInput(e: Event) {
      if (!(e.target instanceof HTMLInputElement)) return;

      const value = e.target?.value;
      if (value && typeof value === 'string' && value[0] === '#') {
        updateElements({
          color: value,
          colorSpan: currColorHexSpan,
          paletteElem: paletteContainer,
          secondaryElem: secondaryDiv,
          tertiaryElem: tertiaryDiv
        });
      }
    }

    if (colorInputElem) {
      colorInputElem.addEventListener('input', handleInput);
    }
  }
</script>

<style>
  label {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: 0.75rem;
  }

  #main-color-input {
    --input-size: 4rem;

    border-radius: 4px;
    height: var(--input-size);
    width: var(--input-size);
    min-width: var(--input-size);
  }

  #selected-color {
    display: block;
    font-weight: bold;
  }

  #palette {
    cursor: help;
    font-size: 0.75rem;
    list-style-type: none;
    padding: 0;
    user-select: none;
  }

  #split-container {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: 1.25rem;
    margin-block-start: 1.5rem;

    & > div {
      cursor: help;
      display: flex;
      align-items: center;
      justify-content: center;
      aspect-ratio: 1 / 1;
      width: 7rem;
      border-radius: 50%;
      margin: 0;
    }
  }
</style>
